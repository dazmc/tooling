#https://www.suse.com/c/rancher_blog/managing-sensitive-data-in-kubernetes-with-sealed-secrets-and-external-secrets-operator-eso/
#https://external-secrets.io/v0.6.0-rc1/
#https://medium.com/nerd-for-tech/getting-started-with-external-secrets-operator-on-kubernetes-using-aws-secrets-manager-6dc403d9630c

# now v1beta1 not v1alpha1

# using AWS
# create a secret
 aws secretsmanager create-secret --name app-secret --secret-string '{"username":"bob","password":"abc123xyz456"}' --region us-east-1

# add helm repo
helm repo add external-secrets https://charts.external-secrets.io
helm repo update
helm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace
kubectl get pods -n external-secrets

# create a secret for accessing KSM
# could use sealed secrets to encrypt this
kubectl create secret generic awssm-secret --from-literal=accessKeyID="XXXX" --from-literal=secretAccessKey="XXXXXX" --dry-run=client -o yaml > secret.yaml
apiVersion: v1
kind: Secret
metadata:
    name: awssm-secret
data:
  accessKeyID: XXXX
  secretAccessKey: XXXXX

# create secretstore (namespace)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: awssm-secretstore
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: awssm-secret
            key: accessKeyID
          secretAccessKeySecretRef:
            name: awssm-secret
            key: secretAccessKey

# create the externalsecret object
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: awssm-external-secret
spec:
  refreshInterval: 1440m
  secretStoreRef:
    name: awssm-secretstore
    kind: SecretStore
  target:
    name: alias-secret
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: app-secret

# see the alias-secret secret created
kubectl get secrets

# second example - uses the same secretstore (and therefore the same AWS credentials in referenced secret)
## new secret
aws secretsmanager create-secret --name kms-secret --description externalsecrets --secret-string kms-value --region us-east-1

## second example external secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: awssm-external-secret2
spec:
  refreshInterval: 1440m
  secretStoreRef:
    name: awssm-secretstore
    kind: SecretStore
  target:
    name: alias-secret2
    creationPolicy: Owner
  data:
    - secretKey: kms-secret
      remoteRef: 
       key: kms-secret

# get secret alias-secret2 is created
kubectl get secrets

#### create iam least privilege account - use the access-key info in the secrets above 
aws iam create-user --user-name external-secrets
aws iam attach-user-policy --user-name external-secrets --policy-arn arn:aws:iam::aws:policy/SecretsManagerReadWrite
aws iam create-access-key --user-name external-secrets # can create 2 - rerun command

### to delete aws iam user
aws iam detach-user-policy --user-name external-secrets --policy-arn arn:aws:iam::aws:policy/SecretsManagerReadWrite
aws iam list-access-keys --user-name external-secrets
aws iam delete-access-key --user-name external-secrets --access-key-id XXXXXX # run again if more than one
aws iam delete-user --user-name external-secrets
